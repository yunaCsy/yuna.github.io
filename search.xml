<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>css笔记</title>
    <url>/2021/06/10/css/</url>
    <content><![CDATA[<h1 id="html中引入css的方法"><a href="#html中引入css的方法" class="headerlink" title="html中引入css的方法"></a>html中引入css的方法</h1><p>行内样式、嵌入式、导入式、 链接式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">	<span class="keyword">@import</span>=&quot;mystyle.css&quot;;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span> 

<p><strong>如果仅需要引入一个css文件，则使用链接方式，如果需要多个css文件，则首先用链接方式引入一个”目录”css文件，这个”目录”css文件中在使用导入式引入其他css文件</strong></p>
<h2 id="link与-import的区别"><a href="#link与-import的区别" class="headerlink" title="link与@import的区别"></a>link与@import的区别</h2><ul>
<li>@import只能导入样式，link可以定义RSS，rel连接属性，引入网站图标等。</li>
<li>加载顺序区别，link标签引入的css被同时加载，@import引入的css将在页面加载完毕后再加载</li>
<li>兼容性区别</li>
</ul>
<blockquote>
<p>使用链接方式时, 会在装载页面主体部分之前装载css文件, 这样显示出来的页面从一开始就是带有样式效果的, 而使用导入式时,会在整个页面装载完成之后再装载css文件, 对于有的浏览器来说, 在一些情况下, 如果网页文件的体积比较大,则会出现先显示无样式的页面,闪烁一下之后再出现设置样式后的效果.从浏览器的感受来说, 这是使用导入式的一个缺陷.</p>
</blockquote>
<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p>盒模型：content、padding、border、margin</p>
<ul>
<li>元素垂直对齐 vertical-alige 仅适用行内元素</li>
<li>宽高自适应<ul>
<li>max-content 采用内部元素宽度值最大的那个元素的宽度作为最终容器的宽度</li>
<li>min-content 采用内部元素最小宽度值的那个元素的宽度作为最终容器的宽度</li>
<li>fit-content 将宽度收缩为内容宽度，加margin：auto实现内容自适应的居中效果，类似高度也有此特性</li>
<li>fill-available 撑满可用空间，可以实现等高布局</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 清除浮动 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    conetne: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><p><strong>这就是一种”内容”与”表现形式”的对应关系</strong></p>
<ul>
<li>群组选择器用“，”隔开  </li>
<li>后代选择器用 空格 隔开</li>
</ul>
<h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><ul>
<li>id 0100</li>
<li>class 0010</li>
<li>标签 0001</li>
<li>行内 最高</li>
<li>继承权重为null, *权重0, 0 &gt; null</li>
<li>!important &gt; 行内</li>
</ul>
<h2 id="伪类，伪元素"><a href="#伪类，伪元素" class="headerlink" title="伪类，伪元素"></a>伪类，伪元素</h2><ul>
<li>伪类， 应用于一组html元素，而你无需在html中用类标记他们 <ul>
<li>::first-child</li>
<li>::link</li>
<li>::hover</li>
</ul>
</li>
<li>伪元素，是html中并不存在的元素，如定义第一个字母或第一行文字<ul>
<li>::first-letter</li>
<li>::first-line</li>
<li>::before</li>
<li>::after</li>
</ul>
</li>
<li>链接多种状态定义顺序 link，visited，focus，hover，active</li>
</ul>
<h2 id="后代级别选择器"><a href="#后代级别选择器" class="headerlink" title="后代级别选择器"></a>后代级别选择器</h2><ul>
<li>div p</li>
<li>div &gt; p</li>
<li>p:only-child</li>
<li>p:nth-child(2)</li>
<li>p:nth-last-child(2)</li>
<li>p:first-child</li>
<li>p:last-child</li>
<li>:root</li>
<li>p:empty</li>
</ul>
<h2 id="同辈级别选择器"><a href="#同辈级别选择器" class="headerlink" title="同辈级别选择器"></a>同辈级别选择器</h2><ul>
<li>div + p</li>
<li>p ~ ul</li>
<li>p:first-of-type</li>
<li>p:last-of-type</li>
<li>p:only-of-type</li>
<li>p:nth-of-type(2)</li>
<li>p:nth-last-of-type(2)</li>
</ul>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul>
<li>[attribute] 匹配指定属性，不论具体值是什么</li>
<li>[attribute=”value”] 完全匹配指定属性值</li>
<li>[attribute~=”value”] 属性值是以空格分割的多个，其中一个完全匹配指定值</li>
<li>[attribute|=”value”] 已value-打头</li>
<li>[attribute^=”value”] 已value开头，value为完整单词或单词一部分</li>
<li>[attribute$=”value”] 已value结尾，value为完整单词或单词一部分</li>
<li>[attribute*=”value”] 属性值为指定值得子字符串</li>
</ul>
<h2 id="UI伪类选择器"><a href="#UI伪类选择器" class="headerlink" title="UI伪类选择器"></a>UI伪类选择器</h2><ul>
<li>:enabled input上作用</li>
<li>:disabled input上作用</li>
<li>:checked   input上作用</li>
<li>:not(select) </li>
<li>::selection  选中</li>
</ul>
<h1 id="介绍下BFC及其应用"><a href="#介绍下BFC及其应用" class="headerlink" title="介绍下BFC及其应用"></a>介绍下BFC及其应用</h1><p>BFC（Block Format Context）块级格式化上下文，是页面盒模型中的一种css渲染模式。相当于<code>一个独立的容器，里面的元素和外部的元素相互不影响</code>。</p>
<p>创建BFC的方式有：</p>
<ul>
<li>html根元素</li>
<li>float浮动</li>
<li>绝对定位</li>
<li>overflow不为visible</li>
<li>display为表格布局或者弹性布局</li>
</ul>
<p>主要的作用是：</p>
<ul>
<li>清除浮动</li>
<li>防止同一BFC容器中的相邻元素－的外边距重叠问题</li>
</ul>
<h1 id="响应式web设计"><a href="#响应式web设计" class="headerlink" title="响应式web设计"></a>响应式web设计</h1><p>针对任意设备对网页内容进行完美布局的一种显示机制</p>
<h2 id="媒体设备"><a href="#媒体设备" class="headerlink" title="媒体设备"></a>媒体设备</h2><ul>
<li>screen</li>
<li>print</li>
</ul>
<p><code>media=&quot;screen&quot;</code></p>
<h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><ul>
<li>要指定的宽度（以像素为单位）/ 容器宽度（以像素为单位） = 值</li>
<li>优点：在各个设备显示更舒服的样式</li>
<li>缺点：兼容各种设备工作量大，效率低下，代码累赘</li>
</ul>
<p><code>弹性网格布局，弹性图片，媒体和媒体查询整合起来</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">960px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;not screen and (max-width: 960px) and (orientation:portrait) &quot;</span> <span class="attr">href</span>=<span class="string">&quot;800width-potrtrait-screen.css&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>




<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>倾斜的字体本身是一种独立存在的字体, 对应于操作系统中的某一个字体库文件  </p>
<p>font-style：italic | oblique</p>
<ul>
<li>italic 是使用当前字体的斜体字体</li>
<li>oblique 是单纯地让文字（形状）倾斜</li>
</ul>
<h1 id="单位em、rem、dpr、ppi、设备独立像素"><a href="#单位em、rem、dpr、ppi、设备独立像素" class="headerlink" title="单位em、rem、dpr、ppi、设备独立像素"></a>单位em、rem、dpr、ppi、设备独立像素</h1><ul>
<li>em: 尺寸跟父级的字号建立关连</li>
<li>rem: 尺寸跟根级(html元素的字号)相关联</li>
<li>设备像素: 物理像素，一般手机的分辨率值得就是设备像素，一个设备的设备像素是不可变的</li>
<li>dpr 是设备像素和设备独立像素的比值, 一般pc dpr=1 iphone7 dpr=2</li>
<li>ppi 每英寸的物理像素的密度</li>
<li>在所有现代浏览器中，其默认的字体大小就是16px，默认1em=16px。</li>
</ul>
<h1 id="css编码技巧"><a href="#css编码技巧" class="headerlink" title="css编码技巧"></a>css编码技巧</h1><ul>
<li>currentColor</li>
<li>继承</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>, select, <span class="selector-tag">button</span> &#123;<span class="attribute">font</span>: inherit&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;<span class="attribute">color</span>: inherit&#125;</span><br></pre></td></tr></table></figure>


<h2 id="width"><a href="#width" class="headerlink" title="width"></a>width</h2><ul>
<li>width:auto 会使元素撑满整个元素，margin、border、padding、content区域会自动分配水平空间。</li>
</ul>
<h2 id="背景与边框"><a href="#背景与边框" class="headerlink" title="背景与边框"></a>背景与边框</h2><ul>
<li>box-sizing: border-box</li>
<li>outline 外边框不会占据空间位置</li>
<li>background-position扩展语法方案</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.eg</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">img.png</span>) no-repeat <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background-position</span>: right <span class="number">20px</span> bottom <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>background-origin 方案 </li>
</ul>
<p><code>background-position:top left</code>,这个top left到底是哪个左上角？ 每个元素身上都存在的三个矩形框 border box（边框的外沿框）、padding box（内边距的外沿框）、content box（内容去的外沿框。background-position默认是以padding box为准。 background-origin可以用来改变这种行为。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.eg</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">img.png</span>) no-repeat bottom right <span class="number">#58a</span>;</span><br><span class="line">    <span class="comment">/* 背景的偏移量与容器的内边距一致 */</span></span><br><span class="line">    <span class="attribute">background-origin</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p><code>position: sticky; top:0px</code>, 粘性定位</p>
<ul>
<li>同级会叠加</li>
<li>不同级会把上面的顶走</li>
</ul>
<h2 id="font-size-0"><a href="#font-size-0" class="headerlink" title="font-size: 0"></a>font-size: 0</h2><p>line-block的元素之间会有空白区域的影响，元素之间差不多会有一个字符的间隙。最简单有效的方法是设置父元素的font-size属性为0。</p>
<h2 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h2><ul>
<li>自带的click点击效果<code>-webkit-tap-highlight-color: rgba(0,0,0,0)</code></li>
<li>控制元素在移动设备上是否使用滚动回弹效果<code>-webkit-overflow-scrolling: touch | auto;</code></li>
</ul>
<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><ul>
<li><code>flex-grow: 1 | 2 | 3 ...</code>  可用空间分配</li>
<li><code>flex-shrink: 0 | 1 | 2 ...</code>  动态缩小 空间分配</li>
<li>min-width &gt;  flex-basis (主轴尺寸) &gt; width</li>
<li><code>flex： 0 0 100px</code>分别对应 放大（flex-grow），缩小（flex-shrink），轴尺寸（flex-basis）</li>
<li>order 排序</li>
<li>使用margin自动撑满空间</li>
</ul>
<h2 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h2><p>overflow：scroll 时不能平滑滚动，添加-webkit-overflow-scrolling：touch启用了硬件加速特性，所以滑动很流畅。</p>
<h2 id="几何图形"><a href="#几何图形" class="headerlink" title="几何图形"></a>几何图形</h2><ul>
<li>clip-path</li>
<li>shape-outside 的本质其实是生成几何图形，并且裁剪掉其几何图形之外周围的区域，让文字能排列在这些被裁剪区域之内。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* keyword values */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: none;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* image values */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">url</span>(<span class="string">resources.svg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* box values */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: fill-box;</span><br><span class="line">    <span class="attribute">clip-path</span>: stroke-box;</span><br><span class="line">    <span class="attribute">clip-path</span>: view-box;</span><br><span class="line">    <span class="attribute">clip-path</span>: margin-box;</span><br><span class="line">    <span class="attribute">clip-path</span>: padding-box;</span><br><span class="line">    <span class="attribute">clip-path</span>: content-box;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* geometry values */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">inset</span>(<span class="number">100px</span> <span class="number">50px</span>);</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">50px</span> at <span class="number">0</span> <span class="number">100px</span>);</span><br><span class="line">    <span class="comment">/* 可以生成任意多边形 */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">50%</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* box and geometry values combined */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: padding-box <span class="built_in">circle</span>(<span class="number">50px</span> at <span class="number">0</span> <span class="number">100px</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* global values */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: inherit;</span><br><span class="line">    <span class="attribute">clip-path</span>: initial;</span><br><span class="line">    <span class="attribute">clip-path</span>: unset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文本省略"><a href="#文本省略" class="headerlink" title="文本省略"></a>文本省略</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 文本省略 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 单词换行 非中日韩文本的换行规则 */</span></span><br><span class="line"><span class="attribute">word-break</span>: break-all | normal | keep-all</span><br><span class="line"></span><br><span class="line">/* 允许长的不可分割的单词进行分割并换行, 长单词或url换行 */</span><br><span class="line">word-wrap: normal | break-wrod</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/07/26/hello-world/</url>
    <content><![CDATA[<p>建了这个博客后, 希望能激励自己多学习, 积累自己的知识财富, 能多记录总结, 多做笔记.</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目使用工具规范代码</title>
    <url>/2021/07/14/%E9%A1%B9%E7%9B%AEeslint-husky-lintStage/</url>
    <content><![CDATA[<h1 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h1><p><a href="https://eslint.bootcss.com/docs/rules/">Eslint</a> <strong>是在 js 代码</strong>中识别和报告模式匹配<strong>的工具</strong>，他的目标是保证代码的一致性和避免错误。</p>
<p>Eslint 的主要功能包含代码格式的校验，代码质量的校验，js 规范。在实际项目中 Eslint 可以检测出代码问题，并标红，但是并不会自动格式化，需要手动格式化。</p>
<span id="more"></span> 

<ol>
<li><code>yarn add eslint</code></li>
<li><code>yarn run eslint --init</code>（自动生成.eslintrc 配置文件,）<ul>
<li>这一步会有几个问题，按照项目需求选择即可</li>
<li>如安装失败(如还需安装那个插件)，按照失败的提示修改即可</li>
</ul>
</li>
<li>vscode: settings.json 配置, vscode编辑器中一定要安装eslint插件</li>
<li>eslint 规则 配置到.eslintrc 文件中</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加 settings.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    <span class="string">&quot;html&quot;</span>,</span><br><span class="line">    <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescriptreact&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，在项目目录 ctrl+shift+p 输入 eslint，确保 eslint 已经启用了，此时保存时 eslint 就可以自动检测代码了，像双引号还可以自动修复为单引号。</p>
<h1 id="Git-Hooks"><a href="#Git-Hooks" class="headerlink" title="Git Hooks"></a>Git Hooks</h1><p>Git 也具有在特定事件发生之前或之后执行特定脚本代码功能（从概念上类比，就与监听事件、触发器之类的东西类似）。<a href="https://www.cnblogs.com/jiaoshou/p/12222665.html">Git Hooks</a> <strong>就是在哪些 git 执行特定事件后触发运行的脚本</strong>。默认情况下 hooks 目录是.git/hooks,但是可以通过 core.hookPath 配置变量来更改。</p>
<p>项目初始化的时候会生成默认钩子(脚本大多是 shell 和 Perl 语言的)，包含大部分可以使用的钩子，但是.sample 扩展名防止他们默认被执行。</p>
<p>因为 hooks 是本地的，不会 git clone 到仓库，也不会收版本控制影响。</p>
<h1 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h1><p><a href="https://typicode.github.io/husky/#/">husky</a> 是一个 git Hook 工具。</p>
<p>husky 使用 git 的一个新功能 core.hookPath 指定 git hooks 所在的目录而不是使用默认的.git/hooks/。</p>
<p>使用 husky install 将 git hooks 的目录指定为.husky/。使用 husky add 命令向.husky/中添加 hook。通过这种方式我们就可以只添加我们需要的 git hook，而且所有的脚本都保存在了一个地方（.husky/目录下）因此也就不存在同步文件的问题了。</p>
<ol>
<li><p><code>yarn add husky -d</code></p>
</li>
<li><p>启用 Git 钩子 <code>npx husky install</code></p>
</li>
<li><p>要在安装后自动启用 Git 挂钩，请编辑 package.json</p>
<p>prepare 脚本会在 npm install（不带参数）之后自动执行。也就是说当我们执行 npm install 安装完项目依赖后会执行 husky install 命令，该命令会创建.husky/目录并指定该目录为 git hooks 所在的目录。</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span>: <span class="string">&quot;husky install&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建一个钩子<br>使用 husky add <file> [cmd]（不要忘记 husky install 之前运行）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/pre-commit &quot;yarn start&quot;</span><br><span class="line">git add .husky/pre-commit</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_21567385/article/details/116429214">husky 版本区别</a></p>
<h1 id="lint-staged"><a href="#lint-staged" class="headerlink" title="lint-staged"></a>lint-staged</h1><p><a href="https://github.com/okonet/lint-staged">lint-staged</a> 仅仅是过滤器(仅过滤 git 暂存文件)，不会帮你格式化任何东西，所以没有代码规则配置文件，需要自己配置一下，如：.eslintrc、.stylelintrc 等，然后在 package.json 中引入。</p>
<p>当文件变化，我们 git commit 它们，pre-commit 钩子会启动，执行 lint-staged 命令，我们对于 lint-staged 如上文配置，对本次被 commited 中的所有.js 文件，执行 eslint –fix 命令和 git add,命令，前者的的目的是格式化，后者是对格式化之后的代码重新提交。</p>
<ol>
<li><code>yarn add lint-staged -d</code></li>
<li>配置 lint-staged.config.js 文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lint-staged.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 在 git 的待提交的文件中，在 src 目录下的所有 js,json,ts,tsx 都要执行两条命令。第一条eslint --cache(仅仅检查改变过的文件) 和--fix ，后一条是将处理过的代码重新 add 到 git 中。</span></span><br><span class="line">  <span class="string">&quot;src/**/*.&#123;js,json,ts,tsx&#125;&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;eslint --cache --fix&quot;</span>,</span><br><span class="line">    <span class="string">&quot;git add&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;src/**/*.&#123;*&#125;&quot;</span>: [<span class="string">&quot;git add&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>eslint</tag>
        <tag>git</tag>
        <tag>husky</tag>
      </tags>
  </entry>
  <entry>
    <title>编译型 &amp; 解释型 语言</title>
    <url>/2019/07/29/%E8%A7%A3%E9%87%8A%E5%9E%8B-%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<blockquote>
<p>计算机只能理解机器语言, 不能直接理解高级语言. 所以必须要把高级语言<strong>翻译</strong>成机器语言, 计算机才能执行高级语言编写的程序.</p>
</blockquote>
<span id="more"></span> 
<h1 id="翻译的两种方式"><a href="#翻译的两种方式" class="headerlink" title="翻译的两种方式"></a>翻译的两种方式</h1><p>两种方式只是翻译的时间不同</p>
<ul>
<li>编译(程序执行之前, 将程序翻译成机器语言,就不在进行翻译了)(C, C++)</li>
<li>解释(程序运行的时候将程序翻译成机器语言, 每次运行每次都翻译)(java, javaScript, C#)</li>
</ul>
<h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><p>如: java程序在运行之前也有一个编译过程，但是并不是将程序编译成机器语言，而是将它编译成字节码（可以理解为一个中间语言）。<br>在运行的时候，由JVM将字节码再翻译成机器语言。</p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>编译型就是编译的时候直接编译成机器可以执行的（.exe .dll .ocx）,编译和执行是分开的，但是不能跨平台.</p>
<h1 id="对比图"><a href="#对比图" class="headerlink" title="对比图"></a>对比图</h1><table>
<thead>
<tr>
<th></th>
<th>解释性语言</th>
<th>编译型语言</th>
</tr>
</thead>
<tbody><tr>
<td>特征</td>
<td>在执行程序的时候才翻译. 每执行一次要翻译一次，效率较低</td>
<td>编译的时候直接编译成机器可以执行的(.exe .dll .ocx) 翻译只做一次，效率高。</td>
</tr>
<tr>
<td>区别</td>
<td>能跨平台,平台独立性(需要解释器)</td>
<td>面向特定平台的因而是平台依赖的</td>
</tr>
<tr>
<td></td>
<td>用占用内存和CPU资源多</td>
<td>消耗的内存少</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
  </entry>
</search>
